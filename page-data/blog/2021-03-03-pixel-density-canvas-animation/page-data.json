{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2021-03-03-pixel-density-canvas-animation/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p><strong>이번 글에서 다룰 내용</strong></p>\n<ul>\n<li>\n<p>픽셀 밀도 Pixel Density</p>\n<ul>\n<li>픽셀 밀도란?</li>\n<li>픽셀 밀도의 단위 PPI/DPI</li>\n<li>픽셀 밀도와 화질</li>\n</ul>\n</li>\n<li>\n<p>픽셀 밀도를 고려한 캔버스 애니메이션</p>\n<ul>\n<li>devicePixelRatio</li>\n<li>화질 비교</li>\n<li>픽셀 밀도 고려해 코드 구현하기</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h3>참고</h3>\n<p><a href=\"https://medium.com/@peternowell/pixel-density-demystified-a4db63ba2922\">Pixel Density Medium Post</a><br>\n<a href=\"https://webclub.tistory.com/629\">픽셀 밀도 한글 포스트</a></p>\n<h2>픽셀 밀도 Pixel Density</h2>\n<h3>픽셀 밀도란?</h3>\n<ul>\n<li>\n<p><strong>픽셀 밀도(pixel density)</strong>란 <strong>물리적인 1픽셀에 얼마나 많은 픽셀이 들어가는지</strong>를 나타내는 것으로 첫 맥에서는 1인치에 72픽셀을 담았다고 한다</p>\n<ul>\n<li>현재 100 ~ 150ppi(pixel per inch)사이면 좋은 모니터라고 하며 보통 115 ~ 160ppi 사이라고 한다</li>\n<li>2010년 애플이 <strong>인치당 두 배의 픽셀</strong>을 출력하는 <strong>레티나 디스플레이</strong>를 선보였고 이후 3x(높이 너비 각각 3배), 4x 등 픽셀 밀도가 높은 화면들이 많이 출시되었다</li>\n</ul>\n</li>\n</ul>\n<h3>픽셀 밀도의 단위 PPI/DPI</h3>\n<ul>\n<li><strong>ppi(pixel per inch)</strong>는 <strong>디스플레이 장치에서 1인치가 몇 개의 픽셀</strong>로 이루어졌는지를 나타낸다</li>\n<li>\n<p><strong>DPI(dots per inch)</strong>는 <strong>인쇄물에서 1인치가 몇 개의 점</strong>으로 이루어졌는지를 나타낸다</p>\n<ul>\n<li>ppi는 디스플레이에서, DPI는 인쇄물에 쓰이는 것으로 서로 다른 개념이지만 흔히 <strong>컴퓨터 스크린을 표현하는데 둘 다 같은 의미로 사용</strong>된다 <a href=\"https://www.sebastien-gabriel.com/designers-guide-to-dpi/\">참고</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://www.sven.de/dpi/\">모니터 PPI 사이트</a>에서 제품별 ppi를 확인해볼 수 있고 <a href=\"https://www.infobyip.com/detectmonitordpi.php\">모니터 DPI 체크 사이트</a>에서는 현재 모니터가 인치당 몇 픽셀을 담고 있는지 알려준다</p>\n<ul>\n<li>맥북 프로는 <a href=\"https://www.sven.de/dpi/\">모니터 PPI 사이트</a>를 확인해보면 226ppi를 가지며 <a href=\"https://www.infobyip.com/detectmonitordpi.php\">모니터 DPI 체크 사이트</a>에서는 192dpi를 갖는다고 한다 (대략 2x => 레니타 디스플레이).</li>\n</ul>\n</li>\n</ul>\n<h3>픽셀 밀도와 화질</h3>\n<ul>\n<li>픽셀 밀도가 높아지면 아래 <a href=\"http://styleguide.co.kr/content/resolution-grid/ratio-design.php\">그림</a>과 같이 픽셀 하나의 크기는 점점 작아지게 되지만 <strong>같은 너비는 더 많은 픽셀들로 이루어지게 된다</strong>\n<img src=\"https://user-images.githubusercontent.com/52592748/109468735-5db66780-7ab0-11eb-8c42-3aa29b33324d.png\" alt=\"image\"></li>\n<li>따라서 아래 <a href=\"https://www.giffgaff.com/blog/pixel-density-how-to-calculate-ppi/\">그림</a>처럼 <strong>ppi가 높아질수록 더욱 정밀한 묘사가 가능</strong>해진다\n<img src=\"https://user-images.githubusercontent.com/52592748/109455520-30f75580-7a9a-11eb-865a-e5d2f5fd79d4.png\" alt=\"image\"></li>\n<li>하지만 1픽셀짜리 그림을 2x의 고밀도 디스플레이 (레티나 디스플레이)에서 그릴 경우 아래처럼 그림이 작아지게되고, 그림의 크기를 강제로 <strong>의도했던 크기로 키울 경우 그림이 깨지게 된다</strong>\n<img src=\"https://images.velog.io/images/jehjong/post/751a0a37-3187-4370-9fa6-0c6d7b78e05f/image.png\"></li>\n<li><a href=\"https://www.giffgaff.com/blog/pixel-density-how-to-calculate-ppi/\">그림</a>을 보면 장치마다 픽셀 밀도가 달라 이를 고려하지 않은 디자인을 하면 쉽게 화질 저하로 이어질 수 있다\n<img src=\"https://user-images.githubusercontent.com/52592748/109460758-76b91b80-7aa4-11eb-92a9-c8830b29ce6d.png\" alt=\"image\"></li>\n</ul>\n<h2>픽셀 밀도를 고려한 캔버스 애니메이션</h2>\n<ul>\n<li>픽셀 밀도를 고려하기 위해서는 일단 픽셀 밀도를 구해야 한다. 이는 devicePixelRatio로 쉽게 구할 수 있다</li>\n</ul>\n<h3>devicePixelRatio</h3>\n<ul>\n<li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio\">devicePixelRatio</a>는 장치의 픽셀 밀도를 나타내는 값으로 default값인 비율 1은 <strong>96DPI</strong> 디스플레이를 뜻한다</p>\n<ul>\n<li>맥북은 레티나 디스플레이기 때문에 해당 비율이 2가 나온다 (인치당 두 배의 픽셀)</li>\n</ul>\n</li>\n</ul>\n<pre class=\"grvsc-container github-light-theme grvsc-ps-t4tStz\" data-language=\"javascript\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tiszgT-1 grvsc-t4tStz-1\">window.devicePixelRatio;</span></span></span></code></pre>\n<h3>화질 비교</h3>\n<ul>\n<li>화질 비교는 <strong>96dpi 일반 모니터</strong>에서 진행했다. 캔버스에 300px*400px 직사각형을 그린 후 <strong>윈도우 창을 500% 확대</strong>했다. 이렇게 하면 <strong>devicePixelRatio는 5</strong>가 나오며 이는 맥북 프로보다도 높은 픽셀 밀도를 갖게된다</li>\n<li>같은 그림이지만 <strong>첫 이미지는</strong> 픽셀 밀도를 고려하지 않은 것이라 가장자리가 <strong>깨져보이고</strong> <strong>두 번째처럼 픽셀 밀도를 고려해 그리면 선명하게 출력</strong>된다. (캡처 사진이라 차이가 명확하지 않지만 실제로 확인해보면 차이가 확연하다)\n<img src=\"https://user-images.githubusercontent.com/52592748/109763211-19a09f80-7c35-11eb-8c77-b50601a9cc73.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/52592748/109765024-9df42200-7c37-11eb-989e-1adaeff14a84.png\" alt=\"image\"></li>\n</ul>\n<h3>픽셀 밀도 고려해 코드 구현하기</h3>\n<ul>\n<li>\n<p>픽셀 밀도를 고려한 캔버스 애니메이션을 하기 위해서는 두 가지를 해야 한다</p>\n<ul>\n<li>\n<ol>\n<li>devicePixelRatio만큼 캔버스 키우기</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>뷰포트에 맞게 캔버스의 CSS너비 축소하기</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h4>1. devicePixelRatio만큼 캔버스 키우기</h4>\n<ul>\n<li>먼저 원하는 캔버스 사이즈로 stageWidth, stageHeight를 설정한다. default 값인 300px * 150px로 놔둬도 되고 특정 픽셀로 해도 지정해도 된다</li>\n<li>윈도우 창에 꽉 차도록 innerWidth와 innerHeight 값으로 설정해봤다</li>\n</ul>\n<pre class=\"grvsc-container github-light-theme grvsc-ps-t4tStz\" data-language=\"javascript\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tiszgT-5 grvsc-t4tStz-9\">let</span><span class=\"grvsc-tiszgT-1 grvsc-t4tStz-1\"> stageWidth </span><span class=\"grvsc-tiszgT-1 grvsc-t4tStz-9\">=</span><span class=\"grvsc-tiszgT-1 grvsc-t4tStz-1\"> window.innerWidth;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tiszgT-5 grvsc-t4tStz-9\">let</span><span class=\"grvsc-tiszgT-1 grvsc-t4tStz-1\"> stageHeight </span><span class=\"grvsc-tiszgT-1 grvsc-t4tStz-9\">=</span><span class=\"grvsc-tiszgT-1 grvsc-t4tStz-1\"> window.innerHeight;</span></span></span></code></pre>\n<ul>\n<li>그 다음에는 장치의 pixelRatio를 구해서 그만큼 캔버스의 크기를 키운다</li>\n<li>캔버스의 width와 height뿐만 아니라 컨텍스트도 동일한 비율로 키워야 한다</li>\n</ul>\n<pre class=\"grvsc-container github-light-theme grvsc-ps-t4tStz\" data-language=\"javascript\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tiszgT-5 grvsc-t4tStz-9\">let</span><span class=\"grvsc-tiszgT-1 grvsc-t4tStz-1\"> ratio </span><span class=\"grvsc-tiszgT-1 grvsc-t4tStz-9\">=</span><span class=\"grvsc-tiszgT-1 grvsc-t4tStz-1\"> window.devicePixelRatio;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tiszgT-1 grvsc-t4tStz-1\">canvas.width </span><span class=\"grvsc-tiszgT-1 grvsc-t4tStz-9\">=</span><span class=\"grvsc-tiszgT-1 grvsc-t4tStz-1\"> stageWidth </span><span class=\"grvsc-tiszgT-1 grvsc-t4tStz-9\">*</span><span class=\"grvsc-tiszgT-1 grvsc-t4tStz-1\"> ratio;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tiszgT-1 grvsc-t4tStz-1\">canvas.height </span><span class=\"grvsc-tiszgT-1 grvsc-t4tStz-9\">=</span><span class=\"grvsc-tiszgT-1 grvsc-t4tStz-1\"> stageHeight </span><span class=\"grvsc-tiszgT-1 grvsc-t4tStz-9\">*</span><span class=\"grvsc-tiszgT-1 grvsc-t4tStz-1\"> ratio;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tiszgT-1 grvsc-t4tStz-1\">ctx.</span><span class=\"grvsc-tiszgT-7 grvsc-t4tStz-5\">scale</span><span class=\"grvsc-tiszgT-1 grvsc-t4tStz-1\">(ratio, ratio);</span></span></span></code></pre>\n<h4>2. 뷰포트에 맞게 캔버스의 CSS너비 축소하기</h4>\n<ul>\n<li>위 단계까지 진행했으면 캔버스가 의도했던 크기로 나타나지 않고 캔버스가 윈도우 창에 다 담기지 못 해 스크롤을 해야하는 상황이 발생할 수도 있다. 이는 보여지는 css 크기도 달라졌기 때문으로 css를 따로 설정해줘야 한다</li>\n</ul>\n<pre class=\"grvsc-container github-light-theme grvsc-ps-t4tStz\" data-language=\"javascript\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tiszgT-1 grvsc-t4tStz-1\">canvas.style.width </span><span class=\"grvsc-tiszgT-1 grvsc-t4tStz-9\">=</span><span class=\"grvsc-tiszgT-1 grvsc-t4tStz-1\"> stageWidth </span><span class=\"grvsc-tiszgT-1 grvsc-t4tStz-9\">+</span><span class=\"grvsc-tiszgT-1 grvsc-t4tStz-1\"> </span><span class=\"grvsc-tiszgT-8 grvsc-t4tStz-10\">&#39;px&#39;</span><span class=\"grvsc-tiszgT-1 grvsc-t4tStz-1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tiszgT-1 grvsc-t4tStz-1\">canvas.style.height </span><span class=\"grvsc-tiszgT-1 grvsc-t4tStz-9\">=</span><span class=\"grvsc-tiszgT-1 grvsc-t4tStz-1\"> stageHeight </span><span class=\"grvsc-tiszgT-1 grvsc-t4tStz-9\">+</span><span class=\"grvsc-tiszgT-1 grvsc-t4tStz-1\"> </span><span class=\"grvsc-tiszgT-8 grvsc-t4tStz-10\">&#39;px&#39;</span><span class=\"grvsc-tiszgT-1 grvsc-t4tStz-1\">;</span></span></span></code></pre>\n<ul>\n<li>이제 캔버스는 <code>stageWdith * devicePixelRatio</code>, <code>stageHeight * devicePixelRatio</code>의 가로세로 길이를 갖게 되며 브라우저에서는 stageWidth, stageHeight의 가로세로로 보여지게 된다 (큰 그림을 축소한 것이라고 생각하면 된다)</li>\n</ul>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .github-light-theme {\n    background-color: #ffffff;\n    color: #000000;\n  }\n  .github-light-theme .grvsc-tiszgT-1 { color: #000000; }\n  .github-light-theme .grvsc-tiszgT-5 { color: #D73A49; }\n  .github-light-theme .grvsc-tiszgT-7 { color: #005CC5; }\n  .github-light-theme .grvsc-tiszgT-8 { color: #032F62; }\n  .github-light-theme .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(0, 0, 0, 0.05));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(0, 0, 0, 0.2));\n  }\n  body[data-theme=dark] .grvsc-ps-t4tStz { color: #ffffff; }\n  body[data-theme=dark] .grvsc-ps-t4tStz .grvsc-t4tStz-1 { color: #FFFFFF; }\n  body[data-theme=dark] .grvsc-ps-t4tStz .grvsc-t4tStz-9 { color: #EB7E81; }\n  body[data-theme=dark] .grvsc-ps-t4tStz .grvsc-t4tStz-5 { color: #BB97E7; }\n  body[data-theme=dark] .grvsc-ps-t4tStz .grvsc-t4tStz-10 { color: #9DCDF5; }\n  body[data-theme=dark] .grvsc-ps-t4tStz .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(0, 0, 0, 0.05));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(0, 0, 0, 0.2));\n  }\n</style>","frontmatter":{"title":"픽셀 밀도(Pixel Density)와 캔버스 애니메이션","desc":"pixel density, ppi, dpi","thumbnail":{"childImageSharp":{"fixed":{"src":"/static/b4e70f9bc2c95ecbdc8536879878a910/2244e/thumbnail.jpg"}}},"date":"2021-03-03","category":"FrontEnd"}}},"pageContext":{"slug":"/blog/2021-03-03-pixel-density-canvas-animation/"}},"staticQueryHashes":["1990743003"]}